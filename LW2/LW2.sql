-- #1
DROP Table Students;
CREATE Table Students(
    id number NOT NULL,
    name varchar2(100),
    group_id number
);

DROP Table Groups;
CREATE Table Groups(
    id number,
    name varchar2(100),
    c_val number NOT NULL
);




-- #2
CREATE OR REPLACE TRIGGER students_check_id
BEFORE INSERT OR UPDATE ON Students
FOR EACH ROW -- ?????, ??? ??? ???? ????? ?????? ????? ????????? ??????????
WHEN (NEW.id IS NOT NULL)  -- ???????? ??? ????? ?????/???? ?????? ? ?????? ???????? (??????????? ??????????????????)
DECLARE
    non_unique_id Students.id%TYPE;
BEGIN
    SELECT id INTO non_unique_id
    FROM Students
    WHERE id = :NEW.id AND ROWNUM=1;

    RAISE_APPLICATION_ERROR(-20001, 'Non-unique id insert ''' || :NEW.id || '''' || ' ' || non_unique_id);
    
    EXCEPTION
    WHEN NO_DATA_FOUND THEN -- ?????????? ?????????? ? SELECT ???????? ?????????? NO_DATA_FOUND
        NULL; 
END;
/


CREATE OR REPLACE TRIGGER groups_check_id
BEFORE INSERT OR UPDATE ON Groups
FOR EACH ROW
WHEN (NEW.Id != OLD.Id)  -- ???????????? ??????????? ?????? ??? ???????? c_val
DECLARE
    non_unique_id Groups.id%TYPE;
BEGIN
    SELECT id INTO non_unique_id
    FROM Groups
    WHERE id = :NEW.id AND ROWNUM=1;

    RAISE_APPLICATION_ERROR(-20001, 'Non-unique id insert ''' || :NEW.id || '''');
    
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL; 
END;
/


CREATE OR REPLACE TRIGGER students_increment_id
BEFORE INSERT OR UPDATE ON Students
FOR EACH ROW -- ?????, ??? ??? id ????????? ??? ?????? ??????
WHEN (NEW.id IS NULL)    -- ?????, ?????? ???? ? ??????? ?? ?????? ???? id
DECLARE
    row_count Number;
    max_id Students.id%TYPE;
BEGIN
    SELECT COUNT(*) INTO row_count FROM Students;
    IF (row_count != 0) THEN
        SELECT Max(id) INTO max_id
        FROM Students;
        :NEW.id := max_id + 1;
    ELSE
         :NEW.id := 1;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER groups_increment_id
BEFORE INSERT OR UPDATE ON Groups
FOR EACH ROW
WHEN (NEW.id IS NULL )
DECLARE
    row_count Number;
    max_id Groups.id%TYPE;
BEGIN
    SELECT COUNT(*) INTO row_count FROM Groups;
    IF (row_count != 0) THEN
        SELECT Max(id) INTO max_id
        FROM Groups;
        :NEW.id := max_id + 1;
    ELSE
         :NEW.id := 1;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER groups_check_name 
BEFORE INSERT OR UPDATE ON Groups
FOR EACH ROW
WHEN (NEW.name IS NOT NULL AND -- ??? name ??????????? ?????????? null ???????? (??????????? ??????????????????)
NEW.name != OLD.name)  -- ???????????? ??????????? ?????? ??? ???????? c_val
DECLARE
    non_unique_name Groups.name%TYPE;
BEGIN 
    SELECT name INTO non_unique_name
    FROM Groups
    WHERE name = :NEW.name AND ROWNUM=1; -- ????????? ? null ????? ?????? ?????????? false, ??????? ?????????? null ?????? ?? ? ??? ???????????

    RAISE_APPLICATION_ERROR(-20001, 'Non-unique name insert ''' || :NEW.name || '''');
    
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL; 
END;
/





-- #3
CREATE OR REPLACE TRIGGER students_groups_fk -- ????????, ??? ?????? ? id ???????
BEFORE INSERT OR UPDATE ON Students
FOR EACH ROW -- ?????, ??? ??? group_id ????? ???????????
WHEN (NEW.group_id IS NOT NULL)
DECLARE
    found_id Groups.id%TYPE;
BEGIN 
    SELECT name INTO found_id
    FROM Groups
    WHERE id = :NEW.group_id AND ROWNUM=1;
    
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'No matching group ''' || :NEW.group_id || '''');
END;
/



CREATE OR REPLACE TRIGGER groups_students_fk -- ????????? ???????? ?? group_id
BEFORE DELETE ON Groups
FOR EACH ROW -- ?????, ??? ??? id ????? ???????????
DECLARE
    found_id Groups.id%TYPE;
BEGIN 
    DELETE FROM Students
    WHERE group_id = :OLD.id;
END;
/




-- #4




-- #5




-- #6
CREATE OR REPLACE TRIGGER change_group_c_val
BEFORE INSERT OR UPDATE OR DELETE ON Students
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        UPDATE Groups SET c_val = c_val + 1
        WHERE id = :NEW.group_id;
    ELSIF DELETING THEN
        UPDATE Groups SET c_val = c_val - 1
        WHERE id = :OLD.group_id;
    ELSIF UPDATING THEN
        IF :NEW.group_id != :OLD.group_id THEN
            UPDATE Groups SET c_val = c_val + 1
            WHERE id = :NEW.group_id;
            UPDATE Groups SET c_val = c_val - 1
            WHERE id = :OLD.group_id;
        END IF;
    END IF;
END;
/






Insert into Groups (name,c_val) VALUES
    ('153505',0);
Insert into Students (name,group_id) VALUES
    ('Petr',1);
    
Select * FROM Groups;
Select * FROM Students;

UPDATE Students SET group_id = 2;               --??? ?? ???????? ???????? ??????????? ??? ??????????? ??????? ????????? ?????????
    
DELETE FROM Groups
WHERE id = 1;

DELETE FROM Students
WHERE id = 1;
