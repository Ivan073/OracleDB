-- #1
DROP TABLE MyTable;
CREATE Table MyTable(
    id number GENERATED BY DEFAULT ON NULL AS IDENTITY,
    val number
)



-- #2
DECLARE
  random NUMBER;
BEGIN
  FOR i IN 1..10000 LOOP
    random := TRUNC(DBMS_RANDOM.VALUE(1, 101)); -- [1,100]

    INSERT INTO MyTable (val) VALUES (random);
  END LOOP;
END;


DECLARE
  random NUMBER;
BEGIN
  FOR i IN 1..10 LOOP
    random := TRUNC(DBMS_RANDOM.VALUE(1, 101)); -- [1,100]

    INSERT INTO MyTable (val) VALUES (random);
  END LOOP;
END;


-- #3
CREATE OR REPLACE FUNCTION more_evens RETURN VARCHAR IS
  odds NUMBER;
  evens NUMBER;
BEGIN
  SELECT COUNT(CASE WHEN MOD(val, 2) = 0 THEN 1 END) AS even_count,
         COUNT(CASE WHEN MOD(val, 2) = 1 THEN 0 END) AS odd_count
  INTO evens, odds
  FROM MyTable;
  
  IF evens < odds THEN
    return 'TRUE';
  ELSIF evens > odds THEN
    return 'FALSE';
  ELSE
    return 'EQUAL';
  END IF;
END;

select more_evens() FROM DUAL;



--#4
CREATE OR REPLACE PROCEDURE generate_insert (id NUMBER) IS
    line VARCHAR(1000);
BEGIN
     line:='INSERT INTO MyTable (Id) VALUES (' || TO_CHAR(id) || ')';
     DBMS_OUTPUT.PUT_LINE(line);
END;

CREATE OR REPLACE FUNCTION generate_insert_function (id NUMBER) RETURN VARCHAR IS
    line VARCHAR(1000);
BEGIN
     line:='INSERT INTO MyTable (Id) VALUES (' || TO_CHAR(id) || ')';
     DBMS_OUTPUT.PUT_LINE(line);
     return line;
END;

CALL generate_insert(102)
SELECT generate_insert_function (101) FROM DUAL;



--#5


CREATE OR REPLACE PROCEDURE mytable_insert2 (Id_val NUMBER,insert_val NUMBER) IS
        not_found EXCEPTION;
        id_matches NUMBER;
BEGIN
    SELECT COUNT(*) INTO id_matches FROM MyTable
    WHERE Id = Id_val;
    IF id_matches = 0 THEN
         INSERT INTO MyTable (id, val) VALUES (id_val,insert_val);
    ELSE
        RAISE not_found;
    END IF;
END;

call mytable_insert2(18,100);
select * FROM MyTable;


CREATE OR REPLACE PROCEDURE mytable_insert (insert_val NUMBER) IS
BEGIN
   INSERT INTO MyTable (val) VALUES (insert_val);
END;

CREATE OR REPLACE PROCEDURE mytable_delete (delete_id NUMBER) IS
BEGIN
   DELETE FROM MyTable
   WHERE Id = delete_id;
END;

CREATE OR REPLACE PROCEDURE mytable_update (update_id NUMBER,update_val NUMBER) IS
BEGIN
    UPDATE MyTable
    SET val = update_val
    WHERE id = update_id;
END;

call mytable_insert(10);
call mytable_delete(10002);
call mytable_update(10003, 210);


--#6
CREATE OR REPLACE FUNCTION annual_reward (salary NUMBER, annual_percent NUMBER) RETURN NUMBER AS
    corrected_percent FLOAT;
    incorrect_input EXCEPTION;
BEGIN
  IF annual_percent < 0 THEN
    RAISE incorrect_input;
  END IF;
  IF salary  < 0 THEN
    RAISE incorrect_input;
  END IF;

  IF ROUND(annual_percent) = annual_percent THEN -- integer check
    corrected_percent := annual_percent / 100;
  ELSE
    corrected_percent := annual_percent;
  END IF;
  return (1+corrected_percent)*12*salary;
EXCEPTION
  WHEN incorrect_input THEN
    DBMS_OUTPUT.PUT_LINE('Incorrect input');
    return 0;
END;

select annual_reward (-2,5) FROM DUAL;




select * FROM MyTable
ORDER BY Id DESC